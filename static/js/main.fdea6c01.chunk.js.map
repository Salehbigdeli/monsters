{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","changeHandler","type","onChange","App","handleChange","e","setState","searchField","target","value","state","fetch","then","response","json","data","this","filteredMonsters","filter","m","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAIaA,G,YAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACRC,IAAI,YACJ,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,aCLjBC,EAAW,SAACR,GACrB,OAAO,qBAAKC,UAAU,YAAf,SAECD,EAAMS,SAASC,KACX,SAACP,GAAD,OAAa,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNnCO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,cAAhB,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkCCG,G,wDAnCb,aAAc,IAAD,8BACX,gBAaFC,aAAe,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZvD,EAAKC,MAAQ,CACXd,SAAS,GACTW,YAAa,IAJJ,E,gEAQQ,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,+BAK/B,IAAD,EACyBC,KAAKN,MAA9Bd,EADA,EACAA,SAAUW,EADV,EACUA,YACXU,EAAmBrB,EAASsB,QAAO,SAAAC,GAAC,OAAIA,EAAE1B,KAAK2B,cAAcC,SAASd,EAAYa,kBAExF,OACE,sBAAKhC,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEW,YAAY,eACZC,cAAegB,KAAKZ,eAEtB,cAAC,EAAD,CAAUR,SAAUqB,W,GA5BVK,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fdea6c01.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.css';\n\nexport const Card = (props) =>{\n    return (\n        <div className='card-container'>\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} \n            alt=\"monster\"/>\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    )\n}","import React from 'react';\nimport './card-list.css'\n\nimport {Card} from '../card/card';\n\nexport const CardList = (props) => {\n    return <div className='card-list'>\n            {\n            props.monsters.map(\n                (monster) => <Card key={monster.id} monster={monster} />\n            )\n            }\n        </div>\n};","import React from 'react';\nimport './search-box.css'\n\nexport const SearchBox = ({ placeholder, changeHandler }) => (\n    <input \n    className='search' \n    type=\"search\" \n    placeholder={placeholder} \n    onChange={changeHandler}/>\n)","import { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list';\nimport {SearchBox} from './components/search-box/search-box';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters:[],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => this.setState({monsters: data}));\n  }\n\n  handleChange = e => this.setState({searchField: e.target.value});\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(m => m.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters App Demo</h1>\n        <SearchBox \n          placeholder='monster name'\n          changeHandler={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}/>\n    </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}